breaks = seq(0,100,5)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
g
?rank
rank(last_month1$perc)
sort(last_month1$perc)
?sort
last_month1$Polling.District[,sort(last_month1$perc,decreasing = F)]
last_month1$Polling.District[sort(last_month1$perc,decreasing = F),]
last_month1$Polling.District[last_month1$perc[sort(last_month1$perc,decreasing = F)]]
last_month1$Polling.District[[sort(last_month1$perc,decreasing = F)]
last_month1$Polling.District[sort(last_month1$perc,decreasing = F)]
sort(last_month1$perc,decreasing = F)
last_month1$Polling.District[sort(last_month1$perc,decreasing = T)]
sort(last_month1$perc,decreasing = T)
last_month1$Polling.District[sort(last_month1$perc,decreasing = T) %in% last_month1$perc]
sort(last_month1$perc,decreasing = T) %in% last_month1$perc
sort(last_month1$perc,decreasing = T)
last_month1$Polling.District[last_month1$perc[sort(last_month1$perc,decreasing = T)]]
last_month1$perc[sort(last_month1$perc,decreasing = T)]]
last_month1$perc[sort(last_month1$perc,decreasing = T)]
last_month1$Polling.District[sort(last_month1$perc,decreasing = T)]
last_month1$perc[last_month1$VoterID == "LABOUR"]
last_month1$perc[last_month1$VoterID == "LABOUR"] + last_month1$Polling.District[last_month1$VoterID == "LABOUR"]
last_month1$Polling.District[last_month1$VoterID == "LABOUR"]
ranked$Polling.District <- last_month1$Polling.District[last_month1$VoterID == "LABOUR"]
ranked <- ""
ranked$Polling.District <- last_month1$Polling.District[last_month1$VoterID == "LABOUR"]
ranked <- table()
ranked <- table("")
ranked$Polling.District <- last_month1$Polling.District[last_month1$VoterID == "LABOUR"]
ranked <- []
ranked <- data.frame()
ranked$Polling.District <- last_month1$Polling.District[last_month1$VoterID == "LABOUR"]
ranked$Polling.District.append(last_month1$Polling.District[last_month1$VoterID == "LABOUR"])
ranked$Percentage <- last_month1$perc[last_month1$VoterID == "LABOUR"]
?cbind
ranked <- cbind(last_month1$Polling.District[last_month1$VoterID == "LABOUR"])
View(ranked)
ranked <- cbind(last_month1$Polling.District[last_month1$VoterID == "LABOUR"], stringsAsFactors = TRUE)
ranked <- cbind(as.character(last_month1$Polling.District[last_month1$VoterID == "LABOUR"]), stringsAsFactors = TRUE)
View(ranked)
ranked <- cbind(as.character(last_month1$Polling.District[last_month1$VoterID == "LABOUR"]))
View(ranked)
ranked <- cbind(as.numeric(last_month1$perc[last_month1$VoterID == "LABOUR"])
sort(last_month1$perc,decreasing = T)
last_month1$perc[sort(last_month1$perc,decreasing = T)]
View(ranked)
ranked <- cbind(as.numeric(last_month1$perc[last_month1$VoterID == "LABOUR"])
sort(last_month1$perc,decreasing = T)
last_month1$perc[sort(last_month1$perc,decreasing = T)]
ranked <- cbind(as.numeric(last_month1$perc[last_month1$VoterID == "LABOUR"]))
View(ranked)
ranked <- cbind(as.character(last_month1$Polling.District[last_month1$VoterID == "LABOUR"]),as.numeric(last_month1$perc[last_month1$VoterID == "LABOUR"]))
View(ranked)
names(ranked) <- c("Polling.District","Labour.promise.%")
View(ranked)
colnames(ranked) <- c("Polling.District","Labour.promise.%")
View(ranked)
print.data.frame(ranked)
print.data.table(ranked)
print(ranked)
g <- ggplot(last_month1, aes(Polling.District,perc)) +
geom_bar(stat = "identity",
aes(fill = VoterID)) +
scale_fill_manual(values=pal) +
xlab("Polling District") +
ylab("Volume %") +
ggtitle(last_month$Ward[1]) +
scale_y_continuous(expand = c(0,0),
limits = c(0,100),
breaks = seq(0,100,5)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
g
View(ranked)
library(dplyr)
library(ggplot2)
# imports downloaded csv from contact creator
df1 <- data.frame(read.csv('./Downloads/Geography vs. Latest Voter ID vs. Latest Reponse Date(2).csv', encoding = 'latin', header = T, skip = 2))
# rename col names
names(df1) <- c("Constituency","Ward","Polling.District","Street","Time.of.contact","VoterID",
"Volume")
# label ward column based on partial string match of polling district
df1$Ward <- ifelse(grepl("BR", df1$Polling.District, fixed = T), "Burmantofts & Richmond Hill",
ifelse(grepl("BH", df1$Polling.District, fixed = T), "Beeston & Holbeck",
ifelse(grepl("CH",df1$Polling.District, fixed = T),"City & Hunslet",
ifelse(grepl("HW", df1$Polling.District, fixed = T), "Hyde Park & Woodhouse",
ifelse(grepl("MI", df1$Polling.District, fixed = T), "Middleton Park","NA")))))
# check structure
head(df1)
# palette for colours
pal <- c("," = "grey",
AGAINST = "#0087DC",
BNP = "#2e3b74",
CONSERVATIVE = "#0087DC",
"DON'T KNOW" = "#dddddd",
"GREEN" ="#6AB023",
"INDEPENDENT" = "chocolate",
LABOUR = "#DC241f",
"LIBERAL DEMOCRAT" = "#FAA61A",
"NON VOTER" = "black",
LABOUR = "#46801c",
SNP = "#FEF987",
"UK INDEPENDENCE" = "#70147A",
"WON\'T SAY" = "#FF7F00",
"azure","azure1","azure2","azure3","azure4")
# new data frame of all contacts in last month
last_month <- subset(df1, Ward == "Burmantofts & Richmond Hill",
select=c("Ward","Polling.District","Time.of.contact","VoterID","Volume"))
#last_month <- subset(last_month, Ward == "City & Hunslet",
#                     select=c("Ward","Polling.District","Time.of.contact","VoterID","Volume"))
# group data for chart
last_month1 <- last_month %>% group_by(Polling.District, VoterID) %>%
summarise(Volume = sum(Volume, na.rm = TRUE)) %>%
mutate(perc = (Volume / sum(Volume))*100)
# graph data for last month
g <- ggplot(last_month1, aes(Polling.District,perc)) +
geom_bar(stat = "identity",
aes(fill = VoterID)) +
scale_fill_manual(values=pal) +
xlab("Polling District") +
ylab("Volume %") +
ggtitle(last_month$Ward[1]) +
scale_y_continuous(expand = c(0,0),
limits = c(0,100),
breaks = seq(0,100,5)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# output as 800 by 400
# creates table of labour promise %
ranked <- data.frame()
ranked <- cbind(as.character(last_month1$Polling.District[last_month1$VoterID == "LABOUR"]),as.numeric(last_month1$perc[last_month1$VoterID == "LABOUR"]))
colnames(ranked) <- c("Polling.District","Labour.promise.%")
g
library(dplyr)
library(ggplot2)
# imports downloaded csv from contact creator
df1 <- data.frame(read.csv('./Downloads/Geography vs. Latest Voter ID vs. Latest Reponse Date(2).csv', encoding = 'latin', header = T, skip = 2))
# check structure
head(df1)
# palette for colours
pal <- c("," = "grey",
AGAINST = "#0087DC",
BNP = "#2e3b74",
CONSERVATIVE = "#0087DC",
"GREEN" ="#6AB023",
"DON'T KNOW" = "#dddddd",
LABOUR = "#DC241f",
"LIBERAL DEMOCRAT" = "#FAA61A",
"NON VOTER" = "black",
LABOUR = "#46801c",
SNP = "#FEF987",
"UK INDEPENDENCE" = "#70147A",
"WON\'T SAY" = "#FF7F00")
# rename col names
names(df1) <- c("Constituency","Ward","Polling.District","Street","Time.of.contact","VoterID",
"Volume")
# new data frame of all contacts in last month
last_month <- subset(df1, Time.of.contact == "02_LastWeek" | Time.of.contact == "04_LastMonth",
select=c("Ward","Polling.District","Time.of.contact","VoterID","Volume"))
# group data for chart
last_month1 <- last_month %>% group_by(Polling.District, VoterID) %>%
summarise(Volume = sum(Volume, na.rm = TRUE))
# graph data for last month
g <- ggplot(last_month1, aes(Polling.District,Volume)) +
geom_bar(stat = "identity",
aes(fill = VoterID)) +
scale_fill_manual(values=pal) +
xlab("Polling District") +
ylab("Volume") +
ggtitle(df1$Constituency[1]) +
scale_y_continuous(expand = c(0,0),
limits = c(0,25),
breaks = seq(0,25,2)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# output as 800 by 400
g
# old leeds pollling districts
# works!
library(rgdal)
library(leaflet)
library(plyr)
require(rgdal)
# correctly imports shapefile
shapeward <- readOGR(dsn = path.expand("/Users/alexcoleman/OneDrive - University of Leeds/Code/Data/Shapefile/Polling Districts Yorkshire and the Humber SHP/"), layer = "Polling Districts Yorkshire and the Humber")
# slice out Leeds wards only
shapeward_leeds <- shapeward[shapeward$LA_name=="Leeds District (B)",]
# this is some sort of magic fix i don't get, but it works
shapeward_leeds <- spTransform(shapeward_leeds, CRS("+proj=longlat +ellps=GRS80"))
setwd("~/Library/Mobile\ Documents/com~apple~CloudDocs/Labour/LCC data mine/")
df <- data.frame(read.csv("LCC elections data/Sampling data/EU Ref/EUrefpolld3.csv", encoding = "latin",
na.strings = "NULL"))
# sort polling district list into alphabetic order
sort.shapeward_leeds <- with(shapeward_leeds, shapeward_leeds[order(shapeward_leeds$Name) , ])
pal <- colorNumeric("viridis",NULL, na.color = "grey")
leaflet(sort.shapeward_leeds) %>%
addPolygons(fillColor = ~pal(df$Remain..),
weight = 0.1,
fillOpacity = 0.75,
smoothFactor = 0.3,
label = ~paste0(df$Polling.District, " : ",df$Remain..,"% remain")) %>%
addTiles()
# new leeds wards
# works!
library(rgdal)
library(leaflet)
require(rgdal)
# correctly imports shapefile
shape <- readOGR(dsn = path.expand("/Users/alexcoleman/OneDrive - University of Leeds/Code/Data/Shapefile/New_Wards_Final3/"), layer = "NW_New_Wards_Final3")
# this is some sort of magic fix i don't get, but it works
shape_leeds <- spTransform(shape, CRS("+proj=longlat +ellps=GRS80"))
leaflet(shape_leeds) %>%
addPolygons(label = ~paste0(shape_leeds$WARD_NAME)) %>%
addTiles()
levels(shape_leeds$WARDID)
shape_leeds$WARDID
shape_leeds$WARD_CODE
shape_leeds$GAZWARD
shape_leeds$WARD_NAMES
shape_leeds$WARD_NAME
shape_leeds$OCELLA
shape_leeds$WARD_NAMES
load("~/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/mynearestleedsmarginal_ver16-3-18/testdata1.RData")
emailstbl <- data.frame(read.csv("Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts"))
emailstbl <- data.frame(read.csv("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts"))
emailstbl <- data.frame(read.csv("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts/"))
emailstbl <- data.frame(read.csv("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/Misc data/emails.csv"))
emailstbl <- data.frame(read.csv("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/Misc data/emails.csv", encoding = "latin"))
emailstbl <- data.frame(read.csv("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/Misc data/emails.csv", encoding = "latin"))
emailstbl
df_2016maj$ConstituencyLabel
View(df_2016maj)
names(df_2016maj$ConstituencyLabel) <- "Ward"
View(df_2016maj)
names(emailstbl) <- c("ConstituencyLabel","Email")
names(emailstbl) <- c("ConstituencyLabel","Email")
View(emailstbl)
library(dplyr)
left_join(df_2016maj,emailstbl, by = "ConstituencyLabel")
df_2017maj <- left_join(df_2016maj,emailstbl, by = "ConstituencyLabel")
df_2016maj <- left_join(df_2016maj,emailstbl, by = "ConstituencyLabel")
rm(df_2017maj)
# first public build
# 23-01-18
# includes google analytics script
# UI
require(leaflet)
# for development
setwd("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/mynearestleedsmarginal_ver23-1-18")
# anything going into fluidPage goes into app
ui <- fluidPage(
tags$head(includeScript("./gtag1.js")),
includeCSS("./mark6.1.css"),
# UI title panel
titlePanel("My Nearest Leeds 2018 Marginal"),
# creates a side bar for postcode, button and slider
sidebarLayout(
sidebarPanel(
tags$p("Welcome to my Nearest Leeds 2018 Marginal!"),
tags$p("We've got all out council election this year
so it's critical you help keep Leeds Labour!"),
tags$p("Enter your postcode below and press search to
find your nearest marginal."),
tags$p(" "),
# text input for postcode
textInput("postcode","Enter postcode", NULL),
# button to control map generation
actionButton("go","Search"),
tags$br(),
tags$br(),
tags$strong("Don't forget polling day is Thursday 3rd May!"),
tags$p(" "),
tags$a(id="#bookmark-this", href = "#",rel="sidebar", "Bookmark this page")
),
mainPanel(
#tags$body(includeScript("./bookmark1.js")),
tags$style('#value{font-size: 20px;
text-align: center;
border-color: rgb(230, 0, 71);
border-top-style: solid;
border-left-style: solid;
border-right-style: solid;
color: rgb(230,0,71);
}
#link1{font-size: 20px;
text-align:center;
border-color: rgb(230, 0, 71);
border-bottom-style: solid;
border-left-style: solid;
border-right-style: solid;
font-color: white;
}'
),
tags$div(tags$p(textOutput("value"),
htmlOutput("link1"),
htmlOutput("link2"))
),
#textOutput("value2")),
tags$br(),
leafletOutput("mymap"),
tags$style('#help1{font-size: 10px;
text-align: center;
font-family: open sans;
}'),
tags$br(),
tags$p(id = "help1", "Made by Alex Coleman ~ Found an error?",tags$a(id = "help1",href="mailto:alexcoleman@hunsletandriversidelabour.org.uk", "Email Me.")),
tags$p(id = "help1", "If the page becomes unresponsive try refreshing your browser."),
tags$p(id = "help1", "This page was made using Shiny.")
#dataTableOutput('table')
)
)
)
# jan 2018 build
# server
# now includes slider (doesn't like 5% maj)
# renders map each time only with constituencies of interest
library(shiny)
library(leaflet)
library(googleway)
library(sp)
# not needed loading data
#library(geojsonio)
library(dplyr)
library(rgeos)
options(shiny.sanitize.errors = FALSE)
load("./testdata1.RData", envir=.GlobalEnv)
server <- function(input, output, session) {
pal <- colorFactor(palette = polpartycol,
levels(df_2016maj$PoliticalPartyLabel))
labels <- sprintf(
"<strong>%s</strong><br/>%g majority<br/>%s",
df_2016maj$ConstituencyLabel, df_2016maj$Majority, df_2016maj$PoliticalPartyLabel
) %>% lapply(htmltools::HTML)
# pressing button on empty postcode input now creates map for centred leeds address
# additional functionality would be to wildcard several leeds addresses aimed at under populated
# key seats
points <- eventReactive(input$go, {
if (input$postcode == ""){
a <- lst[sample(c(1,3,5))]
} else
a <- google_geocode(as.character(input$postcode), key = key1)},
ignoreNULL= TRUE)
output$mymap <- renderLeaflet({
leafletOptions(maxZoom = 10)
leaflet() %>%
addTiles() %>%
addPolygons(data = leedswards,
stroke = TRUE,
color = "black",
fillColor = ~pal(df_2016maj$PoliticalPartyLabel),
fillOpacity=0.3,
dashArray = 5,
weight = 2,
group = "wards",
label = labels)
})
observeEvent(input$go, {
if (!is.null(points)) {
points_a <- cbind(lon = points()$results$geometry$location$lng, lat = points()$results$geometry$location$lat)
points_sp <- SpatialPoints(points_a)
points_df <- data.frame(apply(gDistance(points_sp, leedswards, byid = TRUE),1,min))
df_2016maj <- cbind(df_2016maj,points_df)
names(df_2016maj) <- c("Year",   #1
"Ward",   #2
"Party",  #3
"Majority", #4
"PerMaj",   #5
"Link",     #6
"Constituency",  #7
"Email", #8
"Distance from points")  #9
# NEW SECTION RESOLVING PLOTTING CRASH FOR POSTCODES OUTSIDE OF LEEDS
# pulls out the constituency of postcode entered
if (0 %in% df_2016maj[,9]){
my_const <- filter(df_2016maj,df_2016maj[,9]==0)
# creates a variable of inputted constituency
my_const <- my_const$Constituency
}else
my_const <- "Other"
# END OF NEW SECTION
df_2016majclose <- df_2016maj
# filter list for only key seat list
df_2016majclose <- df_2016majclose %>%
filter(Ward %in% c("Pudsey","Ardsley and Robin Hood","Morley South",
"Rothwell", "Weetwood","Horsforth",
"Garforth and Swillington", "Farnley and Wortley"))
# checks whether inputted postcode constituency is present in
# key seats list, to ensure within constituency filter
if(my_const %in% df_2016majclose$Constituency){
df_2016majclose <- df_2016majclose %>%
filter(Constituency %in% my_const)
}
flt_df_2016majclose <- arrange(df_2016majclose,
df_2016majclose[,9])
df_2016majmap <- leedswards[as.character(leedswards$WD13NM) %in%
as.character(flt_df_2016majclose$Ward[1]),]
labels1 <- sprintf(
"<strong>%s</strong><br/>%g majority<br/>%s",
df_2016majmap$WD13NM, flt_df_2016majclose$Majority[1], as.character(flt_df_2016majclose$Party[1])
) %>% lapply(htmltools::HTML)
}
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addPolygons(data = df_2016majmap,
stroke = TRUE,
color = "black",
fillColor = ~pal(df_2016majclose$Party[df_2016majclose$Ward %in% df_2016majmap$WD13NM]),
fillOpacity=0.7,
weight = 2,
label = labels1) %>%
addMarkers(data = points()$results$geometry$location)
})
output$value <- renderText({
c("Your nearest marginal is",as.character(flt_df_2016majclose$Ward[1]))
})
if (is.na(flt_df_2016majclose$Email[1])){
output$link1 <- renderUI({
lnk <- paste("<a href=",as.character(flt_df_2016majclose$Link[1]),"target='_blank'",
"onclick=","ga('send','event','click','link','IKnow',1)>See events in this ward</a>")
HTML(paste(lnk))})
} else {
output$link1 <- renderUI({
mailto <- paste("<a href=",as.character(flt_df_2016majclose$Email[1]),
"onclick=","ga('send','event','click','emailto','IKnow',1)>Email an organiser to volunteer</a>")
HTML(paste(mailto))
})
}
}
)}
# first public build
# 23-01-18
# includes google analytics script
# UI
require(leaflet)
# for development
setwd("/Users/alexcoleman/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/mynearestleedsmarginal_ver23-1-18")
# anything going into fluidPage goes into app
ui <- fluidPage(
tags$head(includeScript("./gtag1.js")),
includeCSS("./mark6.1.css"),
# UI title panel
titlePanel("My Nearest Leeds 2018 Marginal"),
# creates a side bar for postcode, button and slider
sidebarLayout(
sidebarPanel(
tags$p("Welcome to my Nearest Leeds 2018 Marginal!"),
tags$p("We've got all out council election this year
so it's critical you help keep Leeds Labour!"),
tags$p("Enter your postcode below and press search to
find your nearest marginal."),
tags$p(" "),
# text input for postcode
textInput("postcode","Enter postcode", NULL),
# button to control map generation
actionButton("go","Search"),
tags$br(),
tags$br(),
tags$strong("Don't forget polling day is Thursday 3rd May!"),
tags$p(" "),
tags$a(id="#bookmark-this", href = "#",rel="sidebar", "Bookmark this page")
),
mainPanel(
#tags$body(includeScript("./bookmark1.js")),
tags$style('#value{font-size: 20px;
text-align: center;
border-color: rgb(230, 0, 71);
border-top-style: solid;
border-left-style: solid;
border-right-style: solid;
color: rgb(230,0,71);
}
#link1{font-size: 20px;
text-align:center;
border-color: rgb(230, 0, 71);
border-bottom-style: solid;
border-left-style: solid;
border-right-style: solid;
font-color: white;
}'
),
tags$div(tags$p(textOutput("value"),
htmlOutput("link1"),
htmlOutput("link2"))
),
#textOutput("value2")),
tags$br(),
leafletOutput("mymap"),
tags$style('#help1{font-size: 10px;
text-align: center;
font-family: open sans;
}'),
tags$br(),
tags$p(id = "help1", "Made by Alex Coleman ~ Found an error?",tags$a(id = "help1",href="mailto:alexcoleman@hunsletandriversidelabour.org.uk", "Email Me.")),
tags$p(id = "help1", "If the page becomes unresponsive try refreshing your browser."),
tags$p(id = "help1", "This page was made using Shiny.")
#dataTableOutput('table')
)
)
)
shinyApp(ui, server)
View(df_2016maj)
df_2016maj <- left_join(df_2016maj,emailstbl, by = "ConstituencyLabel")
shinyApp(ui, server)
rm(df1)
rm(df_2016)
rm(emailstbl)
shinyApp(ui, server)
save.image("~/OneDrive - University of Leeds/Code/R scripts/Nearest Marginal Leeds 2018 app/mynearestleedsmarginal_ver16-3-18/testdata1r.RData")
